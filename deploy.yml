name: 🚀 Deploy Clashy PWA to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: 🔍 Validate PWA files
        run: |
          echo "Validating PWA structure..."
          
          # Check required files
          required_files=("index.html" "manifest.json" "sw.js")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Validate manifest.json
          if ! jq empty manifest.json 2>/dev/null; then
            echo "❌ Invalid JSON in manifest.json"
            exit 1
          else
            echo "✅ manifest.json is valid JSON"
          fi
          
          # Check service worker syntax
          if ! node -c sw.js; then
            echo "❌ Service worker has syntax errors"
            exit 1
          else
            echo "✅ Service worker syntax is valid"
          fi

      - name: 🎨 Optimize images (if tools available)
        run: |
          echo "Checking for image optimization tools..."
          if command -v imagemin &> /dev/null; then
            echo "Optimizing images..."
            find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | head -10 | xargs -I {} echo "Found image: {}"
          else
            echo "No image optimization tools found, skipping..."
          fi

      - name: 📊 Generate build info
        run: |
          echo "Generating build information..."
          cat > build-info.json << EOF
          {
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "version": "2.1.0",
            "environment": "production"
          }
          EOF
          echo "✅ Build info generated"

      - name: 🧪 PWA Quality Check
        run: |
          echo "Running PWA quality checks..."
          
          # Check manifest properties
          if jq -e '.name and .short_name and .start_url and .display and .theme_color and .background_color and .icons' manifest.json > /dev/null; then
            echo "✅ Manifest has required properties"
          else
            echo "⚠️ Manifest missing some recommended properties"
          fi
          
          # Check for HTTPS references
          if grep -r "http://" . --include="*.html" --include="*.js" --include="*.json" --exclude-dir=node_modules; then
            echo "⚠️ Found HTTP references (should use HTTPS for PWA)"
          else
            echo "✅ No HTTP references found"
          fi
          
          # Check service worker registration
          if grep -q "serviceWorker.register" index.html; then
            echo "✅ Service worker registration found"
          else
            echo "⚠️ Service worker registration not found in index.html"
          fi

      - name: 📋 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🌐 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Post-deployment checks
  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 🔍 Post-deployment PWA check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Basic connectivity check
          if curl -f -s "https://krarar.github.io/Clashy/" > /dev/null; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi
          
          # Check manifest accessibility
          if curl -f -s "https://krarar.github.io/Clashy/manifest.json" > /dev/null; then
            echo "✅ Manifest is accessible"
          else
            echo "❌ Manifest is not accessible"
          fi
          
          # Check service worker
          if curl -f -s "https://krarar.github.io/Clashy/sw.js" > /dev/null; then
            echo "✅ Service worker is accessible"
          else
            echo "❌ Service worker is not accessible"
          fi

      - name: 📊 Lighthouse CI (if available)
        continue-on-error: true
        run: |
          echo "Would run Lighthouse audit here..."
          echo "Lighthouse Score Check:"
          echo "- Performance: Target > 90"
          echo "- Accessibility: Target > 90" 
          echo "- Best Practices: Target > 90"
          echo "- SEO: Target > 90"
          echo "- PWA: Target = 100"

      - name: 🎉 Deployment Success
        run: |
          echo "🎉 كلاشي PWA deployed successfully!"
          echo "🌐 URL: https://krarar.github.io/Clashy/"
          echo "📱 App is ready for installation"
          echo "🔄 Build completed at: $(date)"